using System.Collections.Generic;
using ExcelDataReader;
using Microsoft.AspNetCore.Mvc;
using System.IO;
using System.Linq;

namespace cinemaTec.Controllers{
    [Route("api/auth")]
    [ApiController]
    public class AuthController : ControllerBase{
        [HttpPost("login")]
        public IActionResult Login([FromBody] LoginModel model)
        {
            var filePath = Path.Combine(Directory.GetCurrentDirectory(), "cinetecbase", "login.xlsx"); // Ruta del archivo Excel

            using (var stream = System.IO.File.Open(filePath, FileMode.Open, FileAccess.Read))
            {
                using (var reader = ExcelReaderFactory.CreateReader(stream))
                {
                    reader.ChangeSheet(0);

                    var adminDataList = new List<AdminData>();

                    while (reader.Read())
                    {
                        var username = reader.GetString(0);
                        var password = reader.GetString(1);

                        if (!string.IsNullOrWhiteSpace(username) && !string.IsNullOrWhiteSpace(password))
                        {
                            adminDataList.Add(new AdminData { Username = username, Password = password });
                        }
                    }

                    // Realiza la autenticación
                    var admin = adminDataList.FirstOrDefault(a => a.Username == model.Username && a.Password == model.Password);

                    if (admin != null)
                    {
                        // Genera el token JWT y lo devuelve como respuesta
                        var token = GenerateJwtToken(admin);
                        return Ok(new { Token = token });
                    }
                }
            }

            // Si no se encuentra el usuario o la contraseña es incorrecta
            return Unauthorized();
        }

       private string GenerateJwtToken(AdminData admin)
{
    // Genera la llave secreta
    var secretKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes("admin123"));

    // Configura la información del token
    var tokenDescriptor = new SecurityTokenDescriptor
    {
        Subject = new ClaimsIdentity(new[]
        {
            new Claim(ClaimTypes.Name, admin.Username), // informacion del token
        }),
        Expires = DateTime.UtcNow.AddDays(7), //tiempo valido del token
        SigningCredentials = new SigningCredentials(secretKey, SecurityAlgorithms.HmacSha256Signature)
    };

    // Crea el token
    var tokenHandler = new JwtSecurityTokenHandler();
    var token = tokenHandler.CreateToken(tokenDescriptor);

    // Devuelve el token como una cadena
    return tokenHandler.WriteToken(token);
}

    }
        [HttpPost("register")]
    public IActionResult Register([FromBody] AdminData newAdmin)
    {
        var filePath = Path.Combine(Directory.GetCurrentDirectory(), "cinetecbase", "login.xlsx"); // Ruta del archivo Excel

        using (var stream = System.IO.File.Open(filePath, FileMode.Open, FileAccess.ReadWrite)) // Cambiamos FileAccess a ReadWrite
        {
            using (var reader = ExcelReaderFactory.CreateReader(stream))
            {
                reader.ChangeSheet(0);

                var adminDataList = new List<AdminData>();

                while (reader.Read())
                {
                    var username = reader.GetString(0);
                    var password = reader.GetString(1);

                    if (!string.IsNullOrWhiteSpace(username) && !string.IsNullOrWhiteSpace(password))
                    {
                        adminDataList.Add(new AdminData { Username = username, Password = password });
                    }
                }

                // Verifica si el nombre de usuario ya existe
                if (adminDataList.Any(a => a.Username == newAdmin.Username))
                {
                    return BadRequest("El nombre de usuario ya existe.");
                }

                // Guarda el nuevo administrador en el archivo Excel
                adminDataList.Add(newAdmin);
                SaveAdminDataToExcel(adminDataList, filePath);

                // regresa un mensaje
                return Ok("Registro exitoso.");
            }
        }

        // En caso de error
        return StatusCode(500, "Error interno del servidor.");
    }

   private void SaveAdminDataToExcel(List<AdminData> adminDataList, string filePath)
{
    using (var package = new ExcelPackage(new FileInfo(filePath)))
    {
        var worksheet = package.Workbook.Worksheets.FirstOrDefault() ?? package.Workbook.Worksheets.Add("Admins");

        // Encabezados (si no existen)
        if (worksheet.Cells["A1"].Value == null)
        {
            worksheet.Cells["A1"].Value = "Username";
            worksheet.Cells["B1"].Value = "Password";
        }

        int startRow = 2; // Empezamos desde la segunda fila (después de los encabezados)

        foreach (var adminData in adminDataList)
        {
            worksheet.Cells[startRow, 1].Value = adminData.Username;
            worksheet.Cells[startRow, 2].Value = adminData.Password;

            startRow++;
        }

        package.Save();
    }
}
    }

